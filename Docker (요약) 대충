# Docker정리

### Docker

도커는 컨테이너(sandbox)기반 오픈소스 가상화 플랫폼

### Container

격리된 공간에서 프로세스가 동작하는 기술.

기존의 가상화 방식은 주로 OS를 가상화

성능문제가 발생했고, 개선하기 위해 프로세스를 격리하는 방식

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/24588406-87f1-456b-a20e-3c56c3d945f0/Screenshot_from_2019-09-03_15-43-26.png

### Image

컨테이너 실행에 필요한 파일과 설정값 포함하고 있는 것. 상태값을 가지지 않고 변하지 않는다. 컨테이너는 이미지를 실행한 상태. 추가되거나 변하는 값은 컨테이너에 저장된다. 같은 이미지에서 여러개의 컨테이너를 생성할 수 있고 컨테이너의 상태가 바뀌거나 삭제되더라도 이미지는 변하지 않고 그대로 남아있다.

### Dockerfile

도커는 이미지를 만들기 위해 Dockerfile 이라는 파일에 자체 DSLe 언어를 이용하여 이미지 생성 과정을 적는다. 

### Dockerfile 기본 명령어

- FROM
    - 베이스 이미지 지정
    - FROM ubuntu:14.04
- MAINTAINER
    - Dockerfile 관리하는 사람의 이름, 이메일
- COPY
    - 파일, 디렉토리를 이미지로 복사, 일반적으로 소스 복사에 사용, target 디렉토리가 없으면 자동으로 생성
    - COPY <src>... <dest>
- ADD
    - COPY와 유사, src에 파일 대신 URL을 입력할 수 있다. src에 압축 파일 입력 시 자동으로 압축을 해제하면서 복사
    - ADD <src>... <dest>
- RUN
    - 명령어를 그대로 실행한다. 내부적으로 /bin/sh -c 뒤에 명령어를 실행하는 방식
    - RUN bundle install
- CMD
    - 도커 컨테이너가 실행되었을 때 실행되는 명령어를 정의. 빌드할 때는 실행되지 않으며 여러 개의 CMD가 존재할 경우 가장 마지막 CMD만 실행된다. 한께먼에 여러 개의 프로그램을 실행하고 싶은 경우 [run.sh](http://run.sh) 파일을 작성하여 데몬으로 실행하거나 supervisord나 forego와 같은 여러 개의 프로그램을 실행하는 프로그램을 사용
    - CMD bundle exec ruby app.rb
- WORKDIR
    - RUN, CMD, ADD, COPY등이 이루어질 기본 디렉토리를 설정한다. 각 명렁어의 현재 디렉토리는 한 줄 한 줄마다 초기화되기 때문에 RUN cd /path 를 하더라도 다음 명령어에선 다시 위치가 초기화된다. 같은 디렉토리에서 계속 작업하기 위해서 WORKDIR을 사용한다
    - WORKDIR /path/to/workdir
- EXPOSE
    - 도커 컨테이너가 실행되었을 때 요청을 기다리고 있는(LISTEN) 포트를 지정. 여러개의 포트를 지정할 수 있다
    - EXPOSE 4000
- VOLUME
    - 컨테이너 외부에 파일시스템을 마운트 할 대 사용.
    - VOLUME ["/data"]
- ENV
    - 컨테이너에서 사용할 환경변수를 지정한다. 컨테이너를 실행할 때 -e옵션을 사용하면 기존 값을 오버라이딩 하게 된다.

### Docker file 예시

```docker
# 베이스 이미지
FROM ubuntu:14.04
MAINTAINER jaeil_lee

# 이미지 생성 과정에서 실행할 명령어
RUN apt-get update
RUN apt-get -y install expect python g++ gcc jam autoconf openssl openssh-server libedit-dev libncurses-dev libicu-dev libcurl4-openssl-dev openjdk-6-jdk vim ctags cscope make
RUN apt-get -y install gcc-4.4 g++-4.4 g++-4.4-multilib gcc-4.4-multilib

RUN update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.4 100
RUN update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 50
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.4 100
RUN update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 50
RUN update-alternatives --install /usr/bin/cpp cpp-bin /usr/bin/cpp-4.4 100
RUN update-alternatives --install /usr/bin/cpp cpp-bin /usr/bin/cpp-4.8 50

RUN mkdir -p /home/lji/Workspace/Tibero

# 컨테이너에서 사용할 환경변수
ENV HOME=/home/lji
ENV JAVA_HOME=/usr/lib/jvm/java-1.6.0-openjdk-amd64
ENV PATH=$JAVA_HOME:$PATH
ENV TB_BASE=$HOME/Workspace/Tibero

RUN touch ~/.bashrc
```

### 도커파일로 이미지 생성 예시

```bash
docker build -t myimage .
// 이때 파일에 dockerfile만 둔다.
// 아니면 해당 디렉토리 전체 파일을 읽는다.
```

### 컨테이너 실행하기

```bash
docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
```

여기서 -it 옵션을 주어야 터미널 입력을 받을 수 있다

- -p : 호스트와 컨테이너 포트 연결
- -v : 호스트와 컨테이너의 디렉토리 연결
- -e : 컨테이너 내에서 사용할 환경변수 설정
- -it : 터미널 입력을 위한 옵션

컨테이너는 프로세스이기 때문에 실행중인 프로세스가 없으면 컨테이너는 종료된다.

### 컨테이너 실행 예시

```bash
docker run -v /home/lji/Workspace/Tibero:/home/lji/Workspace/Tibero
\ --net=host -itd --name t6 tibero
docker exec -it t6 /bin/bash -c 'source ~/.bashrc; 
cd $TB_HOME/config; ./gen_tip.sh; 
cd $TB_HOME/src/scripts; ./tb_newmount.sh'
docker exec -it t6 /bin/bash -c 'source ~/.bashrc; tbsql tibero/tmax'
docker exec -it --privileged t6 /bin/bash

//정지한 컨테이너 다시 실행할 경우
docker start t6
```

### 도커 기본 명령어

- ps : 컨테이너 목록 확인
- stop : 컨테이너 중지
- rm : 종료된 컨테이너 완전 제거
- images : 이미지 목록 확인
- pull : 이미지 다운로드
- rmi : 이미지 삭제

### 컨테이너 둘러보기

- logs : 컨테이너 로그 보기
- exec : 실행중인 컨테이너에 명령어를 내림

## 도커 캐시 삭제

- 사용하지 않는 이미지들(구버전) 많이 쌓이면 디스크 용량이 부족해진다
- 이때 사용하지 않는 == 컨테이너로 띄워지지 않은 이미지들을 제거해준다

```bash
docker system prune -af
```
