
Docker는 Cloud 또는 On-premises로 실행될 수 있는 이식 가능하고 스스로 문제 해결 능력이 있는 컨테이너로서 어플리케이션 배포를 자동화하기 위한 Open-Source Project이다.

!https://prod-files-secure.s3.us-west-2.amazonaws.com/a156cc82-d201-4160-ac40-16f8ab23f7dc/7e0fb21d-ea65-4db3-bbc2-edb41a9815cb/Untitled.png

### Docker Benefit

코드를 더 빨리 전달하고 Application 운영을 표준화하고 리소스 사용률을 높여 비용을 절감할 수 있다. 또한 어디서나 안정적으로 실행할 수 있는 단일 객체를 제공할 수 있다. 

그리고 Docker는 손쉽게 분산 마이크로서비스 아키텍처를 구축 및 실행하고 표준화된 지속적 통합(CI) 및 지속적 전달(CD) 파이프라인을 통해 코드를 배포하고 고도로 확장가능한 데이터 처리 시스템을 구축하고 개발자로 위한 완전관리형 플랫폼을 생성할 수 있다.

### Docker 내부 저장소 관련 정리

[Volume](https://www.notion.so/Volume-c7856ebd4c0845e0ad44fdc974d47060?pvs=21)

### Docker 내부 네트워크 관련 정리

[Network](https://www.notion.so/Network-f8d2703c325c48e980223b1a179d06c5?pvs=21)

### Docker Image

Docker에서 컨테이너를 구축하기 위해서는 베이스가 되는 **Docker image**가 필요하다.

이미지를 docker-hub와 같이 제공하는 다운 받고자 한다면 `docker pull [Images name]:[Tag]` 명령어를 사용한다. 

직접 작업한 컨테이너터를 image화 하기 위해서는 `docker commit [Options] Container [Repo[:Tag]]` 명령어를 사용한다. 또는 Docker File을 만들고 `docker build  —tag='image name' [path]`를 통해 생성한다. 

```yaml
# Dockerfile
# without an file extension

# Use an official Python runtime as a parent image
FROM python:3.7-slim

 # Set the working directory to /app
WORKDIR /app

 # Copy the current directory contents into the container at /app
COPY . /app

# Install any needed packages specified in requirements.txt
RUN apt-get update \
 && apt-get install -y gnupg \
 && apt-get install -y wget
RUN wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
RUN sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
RUN apt-get update \
 && apt-get install -y google-chrome-stable
RUN pip install -r requirements.txt

# Make port 80 available to the world outside this container
#EXPOSE 80

 # Define environment variable
#ENV NAME World

 # Run app.py when the container launches
CMD ["python", "Extract_Data.py"]
```

### Container 실행

컨테이너는 이미지를 가지고 `docker run [Options]  Image [Command] [Arguments...]` 명령어를 사용하면 된다. 

아래 예시로 mongoDB가 설치된 container를 백그라운드로 `mongo`라는 이름으로 외부와 포트포워딩으로 `27017`로 설정하여 외부에서 동일 포트로 접근 가능하도록 실행하는 명령어이다.

다음으로 크롤링 스크립트를 crawling 이름으로 mongo라는 mongo 컨테이너의 호스트를 `--link` 옵션을 통해 적용하여 `mongo`라는 host명으로 mongo 컨테이너의 ip를 접근할 수 있도록 했다.  해당 컨테이너가 실행되면 크롤링 후 mongo 호스트로 접속하여 DB를 적재할 수 있다.

```basic
$ docker run -d mongo —name mongo - 27017:27017 mongo 
$ docker run -it —name 'crawling' —link mongo:mongo crawling_img
```

### Docker Hub

Docker image들을 올리고 내려받고 버전 관리할 수 있는 Git repo와 비슷한 개념이다.

우선 `docker longin`을 통해 계정 접근을 하고 `push`와 같이 repo에 등록할 수 있으며, 하나의 저장소만 **Private**로 설정할 수 있으며 그 이상은 유료이다.

### Docker 기본적인 명령어

전체 이미지 리스트 확인 : `docker images`

전체 컨테이너 확인 : `docker ps -a`   (-a옵션 없을 시 실행 중인 컨테이너만)

Docker 정보 확인 : `docker info`

컨테이너 시작, 중지 : `docker start, docker stop, docker restart`

컨테이너 제거 : `docker rm [Contaner ID or Container Name]`   (중지된 컨테이너만 가능)

이미지 제거 : `docker rmi [Image ID or Image Name]` (해당 이미지를 사용하지 않을 떄만 가능)

이미지 압축 저장 : `docker save [Image] > [Tar Name].tar`

이미지 압축파일 불러오기 : `docker laod [Tar Name]`

컨테이너 압축 저장 : `docker export [Container]`

컨테이너 압축파일 불러오기 : `docker improt [Tar Name]`
